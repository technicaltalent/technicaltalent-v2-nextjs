// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ma/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  wordpressId  Int?     @unique @map("wordpress_id") // Preserve WordPress user ID for mobile app compatibility
  email        String   @unique
  passwordHash String?  @map("password_hash")
  role         UserRole
  firstName    String?  @map("first_name")
  lastName     String?  @map("last_name")
  phone        String?
  status       UserStatus @default(ACTIVE)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relationships
  profile              UserProfile?
  skills               UserSkill[]
  languages            UserLanguage[]
  manufacturers        UserManufacturer[]
  jobsAsEmployer       Job[]               @relation("EmployerJobs")
  applications         JobApplication[]
  transactions         Transaction[]
  sentMessages         Message[]           @relation("SentMessages")
  receivedMessages     Message[]           @relation("ReceivedMessages")
  endorsementsGiven    Endorsement[]       @relation("EndorsementsGiven")
  endorsementsReceived Endorsement[]       @relation("EndorsementsReceived")
  auditLogs            AuditLog[]
  freePlan             UserFreePlan?

  @@map("users")
}

model UserProfile {
  id                     String  @id @default(cuid())
  userId                 String  @unique @map("user_id")
  bio                    String?
  location               Json?   // JSON object for PostgreSQL
  availability           Json?   // JSON object for PostgreSQL  
  notificationSettings   Json?   @map("notification_settings") // JSON object for PostgreSQL
  profileImageUrl        String? @map("profile_image_url")
  lastMsgSeen            DateTime? @map("last_msg_seen")
  smsNotifyDisable       Boolean @default(false) @map("sms_notify_disable")
  emailNotifyDisable     Boolean @default(false) @map("email_notify_disable")
  createdAt              DateTime @default(now()) @map("created_at")
  updatedAt              DateTime @updatedAt @map("updated_at")

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model Skill {
  id          String    @id @default(cuid())
  wordpressId Int?      @unique @map("wordpress_id") // Preserve WordPress term ID for mobile app compatibility
  name        String    @unique
  category    String?
  imageUrl    String?   @map("image_url") // Image for parent skill categories
  parentId    String?   @map("parent_id")
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")

  // Relationships
  parent      Skill?    @relation("SkillHierarchy", fields: [parentId], references: [id])
  children    Skill[]   @relation("SkillHierarchy")
  userSkills  UserSkill[]
  manufacturerMapping SkillManufacturerMapping?

  @@map("skills")
}

model UserSkill {
  userId            String @map("user_id")
  skillId           String @map("skill_id")
  proficiencyLevel  Int    @default(1) @map("proficiency_level") // 1-5 scale
  yearsExperience   Int?   @map("years_experience")
  createdAt         DateTime @default(now()) @map("created_at")

  // Relationships
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill Skill @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@id([userId, skillId])
  @@map("user_skills")
}

model UserLanguage {
  userId            String @map("user_id")
  languageId        String @map("language_id")
  proficiencyLevel  String? @map("proficiency_level") // Native, Fluent, Conversational, Basic
  createdAt         DateTime @default(now()) @map("created_at")

  // Relationships
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  language Language @relation(fields: [languageId], references: [id], onDelete: Cascade)

  @@id([userId, languageId])
  @@map("user_languages")
}

model UserManufacturer {
  userId         String @map("user_id")
  manufacturerId String @map("manufacturer_id")
  createdAt      DateTime @default(now()) @map("created_at")

  // Relationships
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  manufacturer Manufacturer @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)

  @@id([userId, manufacturerId])
  @@map("user_manufacturers")
}

model Job {
  id              String     @id @default(cuid())
  wordpressId     Int?       @unique @map("wordpress_id") // Preserve WordPress post ID for mobile app compatibility
  title           String
  description     String?
  employerId      String     @map("employer_id")
  location        Json?      // JSON object for PostgreSQL
  requiredSkills  Json?      @map("required_skills") // JSON object for PostgreSQL
  payRate         Decimal?   @map("pay_rate") // Proper decimal for PostgreSQL
  payType         PayType?   @map("pay_type")
  status          JobStatus  @default(OPEN)
  startDate       DateTime?  @map("start_date")
  endDate         DateTime?  @map("end_date")
  schedule        String?      // WordPress-compatible serialized schedule data
  paymentStatus   PaymentStatus @default(PENDING) @map("payment_status")
  notifyTalent    Boolean    @default(false) @map("notify_talent")
  selectedTalent  String?    @map("selected_talent")
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")

  // Relationships
  employer        User               @relation("EmployerJobs", fields: [employerId], references: [id])
  applications    JobApplication[]
  transactions    Transaction[]
  endorsements    Endorsement[]
  messages        Message[]
  manufacturers   JobManufacturer[]
  scheduleEntries JobSchedule[]     // New: Multiple date/time entries

  @@map("jobs")
}

model JobApplication {
  id        String            @id @default(cuid())
  jobId     String            @map("job_id")
  talentId  String            @map("talent_id")
  status    ApplicationStatus @default(PENDING)
  type      ApplicationType   // 'application' or 'invitation'
  message   String?
  createdAt DateTime          @default(now()) @map("created_at")

  // Relationships
  job    Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)
  talent User @relation(fields: [talentId], references: [id], onDelete: Cascade)

  @@map("job_applications")
}

model Transaction {
  id              String            @id @default(cuid())
  jobId           String            @map("job_id")
  payerId         String            @map("payer_id")
  amount          Decimal         // Proper decimal for PostgreSQL
  currency        String            @default("AUD")
  stripeChargeId  String?           @map("stripe_charge_id")
  status          TransactionStatus @default(PENDING)
  createdAt       DateTime          @default(now()) @map("created_at")

  // Relationships
  job   Job  @relation(fields: [jobId], references: [id])
  payer User @relation(fields: [payerId], references: [id])

  @@map("transactions")
}

model Endorsement {
  id          String   @id @default(cuid())
  jobId       String   @map("job_id")
  endorserId  String   @map("endorser_id")
  endorsedId  String   @map("endorsed_id")
  rating      Int      // 1-5 scale
  feedback    String?
  createdAt   DateTime @default(now()) @map("created_at")

  // Relationships
  job      Job  @relation(fields: [jobId], references: [id])
  endorser User @relation("EndorsementsGiven", fields: [endorserId], references: [id])
  endorsed User @relation("EndorsementsReceived", fields: [endorsedId], references: [id])

  @@map("endorsements")
}

model Message {
  id          String   @id @default(cuid())
  jobId       String   @map("job_id")
  senderId    String   @map("sender_id")
  recipientId String   @map("recipient_id")
  content     String
  isRead      Boolean  @default(false) @map("is_read")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relationships
  job       Job  @relation(fields: [jobId], references: [id])
  sender    User @relation("SentMessages", fields: [senderId], references: [id])
  recipient User @relation("ReceivedMessages", fields: [recipientId], references: [id])

  @@map("messages")
}

model Manufacturer {
  id          String   @id @default(cuid())
  wordpressId Int?     @unique @map("wordpress_id") // Preserve WordPress term ID for mobile app compatibility
  name        String   @unique
  category    String?  // Audio, Lighting, Video, Stage
  parentId    String?  @map("parent_id") // For hierarchical structure
  description String?
  website     String?
  logoUrl     String?  @map("logo_url")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relationships
  parent      Manufacturer?    @relation("ManufacturerHierarchy", fields: [parentId], references: [id])
  children    Manufacturer[]   @relation("ManufacturerHierarchy")
  users       UserManufacturer[]
  jobs        JobManufacturer[]

  @@map("manufacturers")
}

model JobManufacturer {
  jobId          String @map("job_id")
  manufacturerId String @map("manufacturer_id")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relationships
  job          Job          @relation(fields: [jobId], references: [id], onDelete: Cascade)
  manufacturer Manufacturer @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)

  @@id([jobId, manufacturerId])
  @@map("job_manufacturers")
}

model Language {
  id          String   @id @default(cuid())
  wordpressId Int?     @unique @map("wordpress_id") // Preserve WordPress term ID for mobile app compatibility
  name        String   @unique
  code        String   @unique // ISO language code
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relationships
  userLanguages UserLanguage[]

  @@map("languages")
}

model AuditLog {
  id         String   @id @default(cuid())
  adminId    String   @map("admin_id")
  action     String
  targetType String   @map("target_type")
  targetId   String   @map("target_id")
  changes    String?  // JSON as text for SQLite
  createdAt  DateTime @default(now()) @map("created_at")

  // Relationships
  admin User @relation(fields: [adminId], references: [id])

  @@map("audit_logs")
}

model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("settings")
}

model UserFreePlan {
  id              String   @id @default(cuid())
  userId          String   @map("user_id")
  freeJobsAllowed Int      @default(0) @map("free_jobs_allowed")
  freeJobsUsed    Int      @default(0) @map("free_jobs_used")
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@map("user_free_plans")
}

model SkillManufacturerMapping {
  id                   String   @id @default(cuid())
  skillWordpressId     Int      @map("skill_wordpress_id") // WordPress skill ID (e.g., 2, 3, 4, 125, 182)
  manufacturerCategory String   @map("manufacturer_category") // Audio, Lighting, Video, Stage
  isActive             Boolean  @default(true) @map("is_active")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  // Relationships
  skill Skill? @relation(fields: [skillWordpressId], references: [wordpressId])

  @@unique([skillWordpressId]) // Each skill can only map to one manufacturer category
  @@map("skill_manufacturer_mappings")
}

model JobSchedule {
  id        String   @id @default(cuid())
  jobId     String   @map("job_id")
  date      String   // YYYY-MM-DD format for compatibility
  startTime String   @map("start_time") // HH:MM format
  endTime   String   @map("end_time")   // HH:MM format
  createdAt DateTime @default(now()) @map("created_at")

  // Relationships
  job Job @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@map("job_schedules")
}

// Enums
enum UserRole {
  TALENT
  EMPLOYER
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  DISABLED
}

enum PayType {
  HOURLY
  DAILY
  FIXED
}

enum JobStatus {
  OPEN
  ASSIGNED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ApplicationType {
  APPLICATION
  INVITATION
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
} 